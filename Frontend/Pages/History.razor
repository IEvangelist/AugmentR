@page "/history"
@inject HistoryApiClient historyApiClient
@inject LiveUpdateFrontEndMessenger messenger
@implements IDisposable

<PageTitle>AugmentR History</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">AugmentR History</MudText>
<MudText Class="mb-8">Below is the log of system status messages triggered throughout the system.</MudText>
<MudAlert Severity="Severity.Info">Note: For lower-level system logs you'd want to check the Aspire dashboard.</MudAlert>

<MudTable Items="@historyItems" Dense="false" Hover="true" Bordered="false" Striped="false" Filter="new Func<HistoricalItem,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Description</MudTh>
        <MudTh>Timestamp</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Timestamp">@context.Timestamp</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    private string searchString1 = "";
    IEnumerable<HistoricalItem> historyItems = new List<HistoricalItem>();

    protected async Task Refresh()
    {
        historyItems = await historyApiClient.GetHistory();
        await InvokeAsync(() => StateHasChanged());
    }

    protected override async void OnInitialized()
    {
        messenger.OnStatusChanged += async (status) => await Refresh();
        await Refresh();
    }

    private bool FilterFunc1(HistoricalItem element) => FilterFunc(element, searchString1);

    private bool FilterFunc(HistoricalItem element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ContentId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SourceType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SourceUrl.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public void Dispose()
    {
        messenger.OnStatusChanged -= (status) => Refresh().Wait();
    }
}
